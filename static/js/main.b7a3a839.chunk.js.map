{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","currentPage","total","postPerPage","onPageChange","setCurrentPage","pageNumbers","i","Math","ceil","push","className","classNames","disabled","href","onClick","current","map","page","active","length","items","from","to","numbers","n","getNumbers","App","useState","setPostPerPage","indexOfLastPost","indexOfFirstPost","currentPosts","slice","id","value","onChange","event","target","htmlFor","pageNumber","item","ReactDOM","render","document","getElementById"],"mappings":"oNAYaA,EACX,SAAC,GAKD,IAHK,IADLC,EACI,EADJA,YAAaC,EACT,EADSA,MAAOC,EAChB,EADgBA,YAAaC,EAC7B,EAD6BA,aAAcC,EAC3C,EAD2CA,eAEzCC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKP,EAAQC,GAAcI,GAAK,EACxDD,EAAYI,KAAKH,GAWnB,OACE,qBAAII,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEC,SAA0B,IAAhBZ,IAFd,SAKE,mBACE,UAAQ,WACRU,UAAU,YACVG,KAAK,QACLC,QAnBa,WACnBV,GAAe,SAACW,GAAD,OAAqBA,EAAU,MAmBxC,gBAAc,OALhB,oBAUDV,EAAYW,KAAI,SAAAC,GAAI,OACnB,oBAAIP,UAAWC,IAAW,YAAa,CACrCO,OAAQD,IAASjB,IADnB,SAIE,mBAEE,UAAQ,WACRU,UAAU,YACVG,KAAI,WAAMb,GACVc,QAAS,kBAAMX,EAAac,IAL9B,SAOGA,GANIA,QAUX,oBAAIP,UAAWC,IAAW,YAAa,CACrCC,SAAUZ,IAAgBK,EAAYc,SADxC,SAIE,mBACE,UAAQ,WACRT,UAAU,YACVG,KAAK,QACL,gBAAc,QACdC,QA9CS,WACfV,GAAe,SAACW,GAAD,OAAqBA,EAAU,MAwC1C,wBC7DFK,ECNC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQd,KAAKe,GAGf,OAAOD,EDDKE,CAAW,EAAG,IACzBT,KAAI,SAAAQ,GAAC,qBAAYA,MAEPE,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAO3B,EAAP,KAAoBI,EAApB,KACA,EAAsCuB,mBAAS,GAA/C,mBAAOzB,EAAP,KAAoB0B,EAApB,KAGMC,EAAkB7B,EAAcE,EAEhC4B,EAAmBD,EAAkB3B,EACrC6B,EAAeX,EAAMY,MAAMF,EAAkBD,GAWnD,OACE,sBAAKnB,UAAU,YAAf,UACE,uDAEA,oBAAGA,UAAU,OAAO,UAAQ,OAA5B,yBACWV,EADX,sBAEa8B,EAAmB,EAFhC,cAEuCD,EAFvC,eApBe,GAoBf,QAKA,sBAAKnB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRuB,GAAG,kBACHvB,UAAU,eACVwB,MAAOhC,EACPiC,SArBiB,SAACC,GAC1BR,GAAgBQ,EAAMC,OAAOH,OAC7B9B,EAAe,IAcT,UAOE,wBAAQ8B,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkB5B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,YAAaA,EACbC,MAhDa,GAiDbC,YAAaA,EACbC,aA3Ce,SAACoC,GACpBnC,EAAemC,IA2CXnC,eAAgBA,IAGlB,6BACG2B,EAAaf,KAAI,SAAAwB,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YEnEjBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b7a3a839.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { Dispatch, SetStateAction } from 'react';\n\ntype Props = {\n  currentPage: number;\n  total: number;\n  postPerPage: number;\n  onPageChange:(pageNumber: number) => void;\n  setCurrentPage:Dispatch<SetStateAction<number>>;\n\n};\n\nexport const Pagination: React.FC<Props>\n= ({\n  currentPage, total, postPerPage, onPageChange, setCurrentPage,\n}) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(total / postPerPage); i += 1) {\n    pageNumbers.push(i);\n  }\n\n  const previousPage = () => {\n    setCurrentPage((current: number) => current - 1);\n  };\n\n  const nextPage = () => {\n    setCurrentPage((current: number) => current + 1);\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames(\n        'page-item',\n        { disabled: currentPage === 1 },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          onClick={previousPage}\n          aria-disabled=\"true\"\n        >\n          «\n        </a>\n      </li>\n      {pageNumbers.map(page => (\n        <li className={classNames('page-item', {\n          active: page === currentPage,\n        })}\n        >\n          <a\n            key={page}\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${currentPage}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n      <li className={classNames('page-item', {\n        disabled: currentPage === pageNumbers.length,\n      })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled=\"false\"\n          onClick={nextPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postPerPage, setPostPerPage] = useState(5);\n  const totalPages = 42;\n\n  const indexOfLastPost = currentPage * postPerPage;\n\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\n  const currentPosts = items.slice(indexOfFirstPost, indexOfLastPost);\n\n  const onPageChange = (pageNumber:number) => {\n    setCurrentPage(pageNumber);\n  };\n\n  const changeItemsPerPage = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    setPostPerPage(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} `}\n        {`(items ${indexOfFirstPost + 1} - ${indexOfLastPost} of ${totalPages})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={postPerPage}\n            onChange={changeItemsPerPage}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        currentPage={currentPage}\n        total={totalPages}\n        postPerPage={postPerPage}\n        onPageChange={onPageChange}\n        setCurrentPage={setCurrentPage}\n      />\n\n      <ul>\n        {currentPosts.map(item => (\n          <li\n            data-cy=\"item\"\n            key={item}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}